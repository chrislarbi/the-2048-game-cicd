2048 Game Deployment
1. Project Overview
This repository hosts the 2048 game, a popular puzzle game originally created by Gabriele Cirulli, adapted here as part of a DevOps project. The goal was to containerize the game using Docker and deploy it via a CI/CD pipeline using GitHub Actions, with Render as the hosting platform. This project demonstrates containerization, automation, and deployment practices tailored to a static web application.

Source Inspiration: Based on Gabriele Cirulli’s 2048 and indirectly inspired by Threes.
Objective: Build, test, and deploy the game efficiently while documenting the process.

2. Development and Local Testing
The 2048 game was containerized using a Dockerfile based on nginx:1.25-alpine to serve the static files.

Local Setup:

The game is accessible locally at http://localhost:8081 after running the container with:
bashdocker run -d -p 8081:80 chrislarbi/the-2048-game-cicd

This step confirmed the game’s functionality (tiles and swipes) before deployment.



3. CI/CD Pipeline Implementation
A CI/CD pipeline was set up using GitHub Actions to automate testing, building, and deployment simulation.

Workflow: Defined in .github/workflows/deploy.yml.
Steps:

Run Basic Tests: Checks for the presence of index.html, js/, and style/ directories to ensure all game assets are included.

Example: if [ ! -f index.html ]; then echo "Error: index.html is missing" && exit 1; fi


Build Docker Image: Creates the image chrislarbi/the-2048-game-cicd:latest using docker build.
Simulate Staging Deployment: Sets a STAGING_URL (e.g., https://the-2048-game-cicd-staging.onrender.com) to mimic a staging environment, limited by Render’s free tier.


Trigger: Activates on pushes to the master branch.
Troubleshooting: The Actions trigger was fixed by aligning it with the master branch and correcting syntax errors.

4. Deployment to Render
The game was deployed to Render, a platform-as-a-service provider, using a Docker-based workflow.

Deployment Steps:

Signed up at render.com and linked the GitHub account.
Created a new Web Service, selecting this repository and Docker environment.
Left the Start Command blank to build from the Dockerfile.
Deployed the service and noted the live URL.


Live URL: https://the-2048-game-cicd.onrender.com
Troubleshooting Render Deployment:

Initial deployment showed only the header, with no interactive tiles, likely due to file copy or permission issues.
Resolved by adding RUN chmod -R 755 /usr/share/nginx/html to the Dockerfile, ensuring read permissions for static files.
Manual deployments were used to sync the latest commits after branch alignment.



5. Security Measures
Security was a key focus to protect the application and its deployment process. Below are the implemented measures:

Dependency Management: Pinned the base image to nginx:1.25-alpine to avoid risks from floating tags like latest, ensuring a stable and secure foundation.
Vulnerability Scanning: Integrated Trivy into the CI/CD pipeline to scan the Docker image, configured to fail on high or critical vulnerabilities.
File Integrity: Added a .dockerignore file to exclude .git, .gitignore, *.md, and node_modules, reducing the risk of including unnecessary or malicious files. The chmod -R 755 command secures file permissions.
Secret Management: No GitHub secrets were used, as Render’s build-from-Dockerfile approach (Option B) eliminated the need for Docker Hub authentication. In a production setting, secrets would be stored in GitHub for secure registry access.
Pipeline Checks: Pre-build checks verify the presence of index.html, js/, and style/ to prevent incomplete builds.
Deployment Security: Render provides HTTPS and DDoS protection by default, enhancing the application’s resilience.

6. Documented Security Vulnerability
During development, a vulnerability was intentionally introduced to demonstrate security awareness and remediation.

Issue: Initially used FROM nginx:latest in the Dockerfile, which posed a supply chain risk. This floating tag could pull an image with unpatched Common Vulnerabilities and Exposures (CVEs), such as older Nginx versions susceptible to exploits.
Fix: Switched to FROM nginx:1.25-alpine for a pinned, audited version. Added Trivy scanning in the CI/CD pipeline to detect future issues. This change was implemented in the latest commit.

7. Additional Notes and Contributions

Notes:

GitHub secrets were omitted due to the Render build strategy, simplifying the pipeline. For production, I’d add secrets for a registry like Docker Hub.
The project builds on Gabriele Cirulli’s original 2048, with contributions from maintainers like Anna Harren and sigod, and features like mobile swipe support from Tim Petricola.


Contributions: Open to pull requests—please branch off master and ensure the game works before submitting.
License: MIT license, as per the original project.

8. Acknowledgments
Thanks to Gabriele Cirulli for the original 2048 concept, and to contributors like Tim Petricola (best score storage) and Marcin Gajda (Windows Phone swipes). 






